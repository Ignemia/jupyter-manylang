# =============================================================================
# JupyterLab Multi-Language Docker Environment - Composite Build
# =============================================================================
# This Dockerfile uses multi-stage builds to compile each language kernel
# separately and then combines them into a single JupyterLab environment

# =============================================================================
# Python Kernels Stage (2.7, 3.13, 3.14 beta)
# =============================================================================
FROM python:3.13-slim-bullseye AS python-kernels

RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential wget curl ca-certificates libssl-dev libffi-dev \
    libbz2-dev libreadline-dev libsqlite3-dev libncursesw5-dev \
    xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev zlib1g-dev \
    python2.7 python2.7-dev && rm -rf /var/lib/apt/lists/*

# Python 3.13 (base image)
RUN python -m pip install --upgrade pip ipykernel && \
    python -m ipykernel install --name python3.13 --display-name "Python 3.13"

# Python 2.7
RUN curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py && \
    python2.7 get-pip.py && rm get-pip.py && \
    python2.7 -m pip install ipykernel && \
    python2.7 -m ipykernel install --name python2.7 --display-name "Python 2.7"

# Python 3.14 beta
RUN cd /tmp && \
    wget -q https://www.python.org/ftp/python/3.14.0/Python-3.14.0a3.tgz && \
    tar xzf Python-3.14.0a3.tgz && \
    cd Python-3.14.0a3 && \
    ./configure --enable-optimizations --prefix=/opt/python3.14 && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/Python-* && \
    /opt/python3.14/bin/python3 -m pip install --upgrade pip ipykernel && \
    /opt/python3.14/bin/python3 -m ipykernel install --name python3.14 --display-name "Python 3.14 (beta)"

# =============================================================================
# C++ Kernels Stage (11, 14, 17, 23, 26 beta)
# =============================================================================
FROM continuumio/miniconda3:latest AS cpp-kernels

RUN conda install -y -c conda-forge xeus-cling && \
    conda clean -a -y

# Create kernel specifications for different C++ standards
RUN mkdir -p /kernels && \
    cp -r /opt/conda/share/jupyter/kernels/* /kernels/ && \
    # C++11
    mkdir -p /kernels/cpp11 && \
    echo '{"display_name": "C++11", "argv": ["/opt/conda/bin/xcpp", "-std=c++11", "-f", "{connection_file}"], "language": "c++"}' > /kernels/cpp11/kernel.json && \
    # C++14
    mkdir -p /kernels/cpp14 && \
    echo '{"display_name": "C++14", "argv": ["/opt/conda/bin/xcpp", "-std=c++14", "-f", "{connection_file}"], "language": "c++"}' > /kernels/cpp14/kernel.json && \
    # C++17
    mkdir -p /kernels/cpp17 && \
    echo '{"display_name": "C++17", "argv": ["/opt/conda/bin/xcpp", "-std=c++17", "-f", "{connection_file}"], "language": "c++"}' > /kernels/cpp17/kernel.json && \
    # C++23
    mkdir -p /kernels/cpp23 && \
    echo '{"display_name": "C++23", "argv": ["/opt/conda/bin/xcpp", "-std=c++23", "-f", "{connection_file}"], "language": "c++"}' > /kernels/cpp23/kernel.json && \
    # C++26 beta
    mkdir -p /kernels/cpp26 && \
    echo '{"display_name": "C++26 (beta)", "argv": ["/opt/conda/bin/xcpp", "-std=c++2c", "-f", "{connection_file}"], "language": "c++"}' > /kernels/cpp26/kernel.json

# =============================================================================
# Java Kernels Stage (11, 17, 24 beta)
# =============================================================================
FROM openjdk:11-jdk-bullseye AS java11-base
FROM openjdk:17-jdk-bullseye AS java17-base

FROM python:3.13-slim-bullseye AS java-kernels
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget unzip tar ca-certificates && rm -rf /var/lib/apt/lists/*

# Install required Python packages for IJava installation
RUN pip install --no-cache-dir jupyter_client jupyter_core

# Copy Java installations
COPY --from=java11-base /usr/local/openjdk-11 /opt/java/jdk-11
COPY --from=java17-base /usr/local/openjdk-17 /opt/java/jdk-17

# Java 24 EA
RUN cd /opt/java && \
    (wget -q https://download.java.net/java/early_access/jdk24/latest/GPL/openjdk-24-ea_linux-x64_bin.tar.gz && \
    tar xzf openjdk-24-ea_linux-x64_bin.tar.gz && \
    rm openjdk-24-ea_linux-x64_bin.tar.gz && \
    mv jdk-24* jdk-24) || echo "Java 24 EA not available"

# Install IJava kernel
RUN cd /tmp && \
    wget -q https://github.com/SpencerPark/IJava/releases/download/v1.3.0/ijava-1.3.0.zip && \
    unzip -q ijava-1.3.0.zip && \
    mkdir -p /kernels

# Install kernel for each Java version
RUN cd /tmp && \
    JAVA_HOME=/opt/java/jdk-11 python install.py --prefix=/tmp/java11 && \
    JAVA_HOME=/opt/java/jdk-17 python install.py --prefix=/tmp/java17 && \
    (test -d /opt/java/jdk-24 && JAVA_HOME=/opt/java/jdk-24 python install.py --prefix=/tmp/java24 || true) && \
    # Copy and rename kernels
    cp -r /tmp/java11/share/jupyter/kernels/java /kernels/java11 && \
    cp -r /tmp/java17/share/jupyter/kernels/java /kernels/java17 && \
    (test -d /tmp/java24 && cp -r /tmp/java24/share/jupyter/kernels/java /kernels/java24 || true) && \
    # Update kernel.json files
    sed -i 's/"display_name": "Java"/"display_name": "Java 11"/' /kernels/java11/kernel.json && \
    sed -i 's/"display_name": "Java"/"display_name": "Java 17"/' /kernels/java17/kernel.json && \
    (test -f /kernels/java24/kernel.json && sed -i 's/"display_name": "Java"/"display_name": "Java 24 (beta)"/' /kernels/java24/kernel.json || true) && \
    rm -rf /tmp/ijava* /tmp/java*

# =============================================================================
# C# Kernels Stage (.NET 7, 8, 9 beta) - Simplified placeholder
# =============================================================================
FROM python:3.13-slim-bullseye AS csharp-kernels
# Skip .NET kernel installation for now - it has compatibility issues
# Create placeholder kernel directories
RUN mkdir -p /kernels/dotnet7-csharp && \
    mkdir -p /kernels/dotnet8-csharp && \
    mkdir -p /kernels/dotnet9-csharp && \
    echo '{"display_name": "C# (.NET 7) - Not Installed", "argv": ["echo", "C# kernel not installed"], "language": "csharp"}' > /kernels/dotnet7-csharp/kernel.json && \
    echo '{"display_name": "C# (.NET 8 LTS) - Not Installed", "argv": ["echo", "C# kernel not installed"], "language": "csharp"}' > /kernels/dotnet8-csharp/kernel.json && \
    echo '{"display_name": "C# (.NET 9 Preview) - Not Installed", "argv": ["echo", "C# kernel not installed"], "language": "csharp"}' > /kernels/dotnet9-csharp/kernel.json

# =============================================================================
# Go Kernel Stage
# =============================================================================
FROM golang:1.23-bullseye AS go-kernels
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip && rm -rf /var/lib/apt/lists/*

ENV GOPATH=/go
ENV PATH=$GOPATH/bin:/usr/local/go/bin:$PATH

RUN go install github.com/gopherdata/gophernotes@latest && \
    mkdir -p /kernels/gophernotes && \
    cd /kernels/gophernotes && \
    cp "$(go env GOPATH)"/pkg/mod/github.com/gopherdata/gophernotes@*/kernel/* . && \
    chmod +w kernel.json && \
    sed "s|gophernotes|$(go env GOPATH)/bin/gophernotes|" < kernel.json.in > kernel.json

# =============================================================================
# Julia Kernel Stage
# =============================================================================
FROM julia:1.11-bullseye AS julia-kernels
RUN julia -e 'using Pkg; Pkg.add("IJulia"); Pkg.add(["DataFrames", "CSV", "Plots", "PlotlyJS"])' && \
    julia -e 'using IJulia; IJulia.installkernel("Julia", "--depwarn=no")' && \
    mkdir -p /kernels && \
    cp -r /root/.local/share/jupyter/kernels/julia* /kernels/

# =============================================================================
# Rust Kernel Stage
# =============================================================================
FROM rust:1.83-bullseye AS rust-kernels
RUN apt-get update && apt-get install -y --no-install-recommends \
    cmake pkg-config libssl-dev libzmq3-dev && rm -rf /var/lib/apt/lists/*

ENV RUSTUP_HOME=/usr/local/rustup
ENV CARGO_HOME=/usr/local/cargo
ENV PATH=/usr/local/cargo/bin:$PATH

# Skip Rust kernel installation due to compatibility issues
# Create a placeholder kernel instead
RUN mkdir -p /kernels/rust && \
    echo '{"display_name": "Rust - Not Installed", "argv": ["echo", "Rust kernel not installed due to compatibility issues"], "language": "rust"}' > /kernels/rust/kernel.json

# =============================================================================
# Node.js/TypeScript Kernel Stage
# =============================================================================
FROM node:22-bullseye AS nodejs-kernels
# Install Python and Jupyter dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip && \
    rm -rf /var/lib/apt/lists/* && \
    pip3 install jupyter jupyterlab notebook

RUN npm install -g typescript tslab && \
    tslab install && \
    mkdir -p /kernels && \
    # Try multiple possible locations for the kernel
    (cp -r /usr/local/share/jupyter/kernels/tslab /kernels/ 2>/dev/null || \
     cp -r /usr/share/jupyter/kernels/tslab /kernels/ 2>/dev/null || \
     cp -r /root/.local/share/jupyter/kernels/tslab /kernels/ 2>/dev/null || \
     echo "Warning: TypeScript kernel not found in expected locations") && \
    # Create a placeholder kernel.json for TypeScript if not found
    if [ ! -d /kernels/tslab ]; then \
        mkdir -p /kernels/tslab && \
        echo '{"display_name": "TypeScript", "argv": ["tslab", "kernel", "--config-path", "{connection_file}"], "language": "typescript"}' > /kernels/tslab/kernel.json; \
    fi

# =============================================================================
# R Kernel Stage
# =============================================================================
FROM python:3.13-slim-bullseye AS r-kernels
# Skip R kernel installation due to package installation issues
# Create a placeholder kernel instead
RUN mkdir -p /kernels/ir && \
    echo '{"display_name": "R - Not Installed", "argv": ["echo", "R kernel not installed due to package installation issues"], "language": "R"}' > /kernels/ir/kernel.json

# =============================================================================
# Other Kernels Stage (Kotlin, Scala, Bash, SPARQL)
# =============================================================================
FROM continuumio/miniconda3:latest AS other-kernels
RUN apt-get update && apt-get install -y --no-install-recommends \
    openjdk-17-jdk-headless curl && rm -rf /var/lib/apt/lists/*

# Kotlin
RUN conda install -y -c jetbrains kotlin-jupyter-kernel && conda clean -a -y

# Scala
ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
RUN curl -Lo coursier https://git.io/coursier-cli && \
    chmod +x coursier && \
    ./coursier launch --fork almond -- --install && \
    rm coursier

# Bash and SPARQL
RUN pip install bash_kernel sparqlkernel && \
    python -m bash_kernel.install && \
    python -m sparqlkernel.install

RUN mkdir -p /kernels && \
    # Copy kernels from conda installation
    (cp -r /opt/conda/share/jupyter/kernels/kotlin /kernels/ 2>/dev/null || echo "Kotlin kernel not found") && \
    # Copy kernels from standard locations
    (cp -r /usr/local/share/jupyter/kernels/scala* /kernels/ 2>/dev/null || \
     cp -r /usr/share/jupyter/kernels/scala* /kernels/ 2>/dev/null || \
     cp -r /root/.local/share/jupyter/kernels/scala* /kernels/ 2>/dev/null || \
     echo "Scala kernel not found") && \
    (cp -r /usr/local/share/jupyter/kernels/bash /kernels/ 2>/dev/null || \
     cp -r /usr/share/jupyter/kernels/bash /kernels/ 2>/dev/null || \
     cp -r /root/.local/share/jupyter/kernels/bash /kernels/ 2>/dev/null || \
     echo "Bash kernel not found") && \
    (cp -r /usr/local/share/jupyter/kernels/sparql /kernels/ 2>/dev/null || \
     cp -r /usr/share/jupyter/kernels/sparql /kernels/ 2>/dev/null || \
     cp -r /root/.local/share/jupyter/kernels/sparql /kernels/ 2>/dev/null || \
     echo "SPARQL kernel not found")

# =============================================================================
# Final Stage - Combine all kernels
# =============================================================================
FROM python:3.13-bullseye

LABEL maintainer="JupyterLab Multi-Language Environment"
LABEL description="Version-agnostic with specific exceptions for C++, Java, Python, and C#"
LABEL version="6.0.0"

# Environment setup
ENV DEBIAN_FRONTEND=noninteractive
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# Install system dependencies
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    # Build essentials
    build-essential cmake pkg-config make \
    # Compilers
    gcc g++ gfortran \
    # Utilities
    curl wget git vim nano \
    gnupg ca-certificates lsb-release \
    software-properties-common apt-transport-https \
    # Libraries
    libzmq3-dev libczmq-dev libssl-dev libffi-dev \
    libbz2-dev libreadline-dev libsqlite3-dev libncursesw5-dev \
    xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev \
    # R dependencies
    libcurl4-openssl-dev libgit2-dev libblas-dev liblapack-dev \
    # Archive tools
    unzip tar gzip \
    # Locales and fonts
    locales fonts-liberation fonts-dejavu-core \
    # Python 2.7
    python2.7 python2.7-dev \
    # .NET dependencies
    libc6 libgcc1 libgssapi-krb5-2 libicu67 libstdc++6 zlib1g \
    && locale-gen en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# Install JupyterLab
RUN pip install --no-cache-dir \
    jupyterlab==4.* \
    notebook \
    ipykernel \
    ipywidgets \
    jupyter-console \
    nbconvert \
    # Kernels installed via pip
    bash_kernel \
    sparqlkernel

# Copy language runtimes from build stages
# Miniconda (for C++ and Kotlin)
COPY --from=cpp-kernels /opt/conda /opt/miniconda
# Java
COPY --from=java-kernels /opt/java /opt/java
# .NET - Skipped for now due to compatibility issues
# Go
COPY --from=go-kernels /usr/local/go /usr/local/go
COPY --from=go-kernels /go /go
# Julia
COPY --from=julia-kernels /usr/local/julia /usr/local/julia
COPY --from=julia-kernels /root/.julia /root/.julia
# Rust
COPY --from=rust-kernels /usr/local/rustup /usr/local/rustup
COPY --from=rust-kernels /usr/local/cargo /usr/local/cargo
# Node.js
COPY --from=nodejs-kernels /usr/local/bin/node /usr/local/bin/node
COPY --from=nodejs-kernels /usr/local/lib/node_modules /usr/local/lib/node_modules
# R - Only placeholder kernel (no R installation)
# Python 3.14
COPY --from=python-kernels /opt/python3.14 /opt/python3.14

# Copy kernel specifications - create directory first
RUN mkdir -p /usr/local/share/jupyter/kernels

# Copy Python kernels
COPY --from=python-kernels /usr/local/share/jupyter/kernels/python2.7 /usr/local/share/jupyter/kernels/python2.7
COPY --from=python-kernels /usr/local/share/jupyter/kernels/python3.13 /usr/local/share/jupyter/kernels/python3.13
COPY --from=python-kernels /usr/local/share/jupyter/kernels/python3.14 /usr/local/share/jupyter/kernels/python3.14

# Copy C++ kernels
COPY --from=cpp-kernels /kernels/cpp11 /usr/local/share/jupyter/kernels/cpp11
COPY --from=cpp-kernels /kernels/cpp14 /usr/local/share/jupyter/kernels/cpp14
COPY --from=cpp-kernels /kernels/cpp17 /usr/local/share/jupyter/kernels/cpp17
COPY --from=cpp-kernels /kernels/cpp23 /usr/local/share/jupyter/kernels/cpp23
COPY --from=cpp-kernels /kernels/cpp26 /usr/local/share/jupyter/kernels/cpp26

# Copy Java kernels
COPY --from=java-kernels /kernels/java11 /usr/local/share/jupyter/kernels/java11
COPY --from=java-kernels /kernels/java17 /usr/local/share/jupyter/kernels/java17

# Copy C# placeholder kernels
COPY --from=csharp-kernels /kernels/dotnet7-csharp /usr/local/share/jupyter/kernels/dotnet7-csharp
COPY --from=csharp-kernels /kernels/dotnet8-csharp /usr/local/share/jupyter/kernels/dotnet8-csharp
COPY --from=csharp-kernels /kernels/dotnet9-csharp /usr/local/share/jupyter/kernels/dotnet9-csharp

# Copy Go kernel
COPY --from=go-kernels /kernels/gophernotes /usr/local/share/jupyter/kernels/gophernotes

# Copy Julia kernels
COPY --from=julia-kernels /kernels /tmp/julia-kernels
RUN cp -r /tmp/julia-kernels/* /usr/local/share/jupyter/kernels/ 2>/dev/null || true && rm -rf /tmp/julia-kernels

# Copy Rust kernel
COPY --from=rust-kernels /kernels /tmp/rust-kernels
RUN cp -r /tmp/rust-kernels/* /usr/local/share/jupyter/kernels/ 2>/dev/null || true && rm -rf /tmp/rust-kernels

# Copy Node.js/TypeScript kernel
COPY --from=nodejs-kernels /kernels /tmp/nodejs-kernels
RUN cp -r /tmp/nodejs-kernels/* /usr/local/share/jupyter/kernels/ 2>/dev/null || true && rm -rf /tmp/nodejs-kernels

# Copy R kernel
COPY --from=r-kernels /kernels /tmp/r-kernels
RUN cp -r /tmp/r-kernels/* /usr/local/share/jupyter/kernels/ 2>/dev/null || true && rm -rf /tmp/r-kernels

# Copy other kernels
COPY --from=other-kernels /kernels /tmp/other-kernels
RUN cp -r /tmp/other-kernels/* /usr/local/share/jupyter/kernels/ 2>/dev/null || true && rm -rf /tmp/other-kernels

# Environment variables
ENV PATH=/opt/miniconda/bin:$PATH
ENV GOPATH=/go
ENV PATH=$GOPATH/bin:/usr/local/go/bin:$PATH
ENV JULIA_PATH=/usr/local/julia
ENV PATH=${JULIA_PATH}/bin:$PATH
ENV RUSTUP_HOME=/usr/local/rustup
ENV CARGO_HOME=/usr/local/cargo
ENV PATH=/usr/local/cargo/bin:$PATH
ENV PATH=/usr/local/bin:$PATH
ENV NOTEBOOK_DIR=/notebooks
ENV JUPYTER_CONFIG_DIR=/config

# Create symlinks for npm/npx
RUN ln -sf /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -sf /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx

# Fix kernel.json paths
RUN find /usr/local/share/jupyter/kernels -name "kernel.json" -exec sed -i 's|"/opt/python3.14/bin/python3"|"/opt/python3.14/bin/python3"|g' {} \;

# Create directories
RUN mkdir -p /notebooks /config

# Copy configuration and scripts
COPY config/jupyter_notebook_config.py /config/
COPY update-languages.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/update-languages.sh

# Create entrypoint
RUN echo '#!/bin/bash\n\
echo "Updating beta/preview language versions..."\n\
/usr/local/bin/update-languages.sh\n\
echo "Starting JupyterLab..."\n\
exec "$@"' > /entrypoint.sh && chmod +x /entrypoint.sh

# Expose port 7654
EXPOSE 7654

# Set working directory
WORKDIR /notebooks

# Use custom entrypoint
ENTRYPOINT ["/entrypoint.sh"]
CMD ["jupyter", "lab", "--ip=0.0.0.0", "--port=7654", "--no-browser", "--allow-root", "--notebook-dir=/notebooks", "--config=/config/jupyter_notebook_config.py"]
